{"version":3,"sources":["redux/types.js","redux/actions.js","components/Loader.js","components/Post.js","components/FetchedPosts.js","components/Alert.js","components/PostForm.js","components/Posts.js","App.js","redux/appReducer.js","redux/postsReducer.js","redux/rootReducer.js","reportWebVitals.js","redux/middleware.js","redux/sagas.js","index.js"],"names":["CREATE_POST","FETCH_POSTS","SHOW_LOADER","HIDE_LOADER","SHOW_ALERT","HIDE_ALERT","REQUEST_POSTS","hideLoader","type","showAlert","text","dispatch","payload","setTimeout","hideAlert","Loader","className","role","Post","post","title","FetchedPosts","useDispatch","posts","useSelector","state","fetchedPosts","app","loading","length","map","id","onClick","Alert","PostForm","props","submitHandler","event","preventDefault","trim","newPost","Date","now","toString","createPost","setState","changeInputHandler","e","persist","prev","target","name","value","onSubmit","this","alert","htmlFor","onChange","React","Component","mapDispatchToProps","connect","syncPosts","App","initialState","rootReducer","combineReducers","action","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","forbidden","sagaWatcher","sagaWorker","takeEvery","put","call","fetchPosts","a","fetch","response","json","saga","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","next","filter","w","includes","run","render","document","getElementById"],"mappings":"4LAAaA,EAAc,cACdC,EAAc,cACdC,EAAc,cACdC,EAAc,cACdC,EAAa,aACbC,EAAa,aACbC,EAAgB,gBCStB,SAASC,IACd,MAAO,CACLC,KAAML,GAIH,SAASM,EAAUC,GACxB,OAAO,SAACC,GACNA,EAAS,CACPH,KAAMJ,EACNQ,QAASF,IAEXG,YAAW,WACTF,EAASG,OACR,MAIA,SAASA,IACd,MAAO,CACLN,KAAMH,G,WCjCGU,EAAS,WACpB,OACE,qBAAKC,UAAU,8BAA8BC,KAAK,SAAlD,SACE,sBAAMD,UAAU,kBAAhB,2BCHOE,EAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACrB,OACE,qBAAKH,UAAU,OAAf,SACE,qBAAKA,UAAU,YAAf,SACE,oBAAIA,UAAU,aAAd,SAA4BG,EAAKC,aCA5BC,EAAe,WAC1B,IAAMV,EAAWW,cACXC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,MAAMG,gBAG/C,OAFgBF,aAAY,SAAAC,GAAK,OAAIA,EAAME,IAAIC,WAGtC,cAAC,EAAD,IAGJL,EAAMM,OAQFN,EAAMO,KAAI,SAAAX,GAAI,OAAI,cAAC,EAAD,CAAMA,KAAMA,GAAWA,EAAKY,OAP9C,wBACLf,UAAU,kBACVgB,QAAS,WACPrB,EHqBC,CACLH,KAAMF,KGzBC,mB,+CCdE2B,EAAQ,SAAC,GAAY,IAAXvB,EAAU,EAAVA,KACrB,OACE,qBAAKM,UAAU,sBAAsBC,KAAK,QAA1C,SACGP,KCADwB,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,cAAgB,SAAAC,GACdA,EAAMC,iBACN,IAAQlB,EAAU,EAAKK,MAAfL,MACR,IAAKA,EAAMmB,OACT,OAAO,EAAKJ,MAAM1B,UAAU,6EAG9B,IAAM+B,EAAU,CACdpB,QAAOW,GAAIU,KAAKC,MAAMC,YAGxB,EAAKR,MAAMS,WAAWJ,GACtB,EAAKK,SAAS,CAAEzB,MAAO,MApBN,EAuBnB0B,mBAAqB,SAAAC,GACnBA,EAAEC,UACF,EAAKH,UAAS,SAAAI,GAAI,kCACbA,GADa,eAEbF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,YAxB9B,EAAK3B,MAAQ,CACXL,MAAO,IAJQ,E,0CAgCnB,WACE,OACE,uBAAMiC,SAAUC,KAAKlB,cAArB,UAEGkB,KAAKnB,MAAMoB,OAAS,cAAC,EAAD,CAAO7C,KAAM4C,KAAKnB,MAAMoB,QAE7C,sBAAKvC,UAAU,OAAf,UACE,uBAAOwC,QAAQ,QAAQxC,UAAU,aAAjC,mGACA,uBACER,KAAK,OACLQ,UAAU,eACVe,GAAG,QACHqB,MAAOE,KAAK7B,MAAML,MAClB+B,KAAK,QACLM,SAAUH,KAAKR,wBAGnB,wBAAQ9B,UAAU,kBAAkBR,KAAK,SAAzC,+D,GAlDekD,IAAMC,WAwDvBC,EAAqB,CACzBhB,WL5DK,SAAoBzB,GACzB,MAAO,CACLX,KAAMR,EACNY,QAASO,IKyDCV,YAAWK,aAOV+C,eAJS,SAAApC,GAAK,MAAK,CAChC8B,MAAO9B,EAAME,IAAI4B,SAGqBK,EAAzBC,CAA6C3B,GCrD7C2B,eAJS,SAAApC,GAAK,MAAK,CAChCqC,UAAWrC,EAAMF,MAAMA,SAGe,KAAzBsC,EAZD,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACf,OAAKA,EAAUjC,OAGNiC,EAAUhC,KAAI,SAAAX,GAAI,OAAI,cAAC,EAAD,CAAMA,KAAMA,GAAWA,EAAKY,OAFlD,mBAAGf,UAAU,cAAb,yBCoBI+C,MAtBf,WACE,OACE,sBAAK/C,UAAU,iBAAf,UACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,MAAf,SACE,cAAC,EAAD,QAGJ,sBAAKA,UAAU,MAAf,UACE,sBAAKA,UAAU,MAAf,UACE,6HACA,cAAC,EAAD,OAEF,sBAAKA,UAAU,MAAf,UACE,mIACA,cAAC,EAAD,cCjBJgD,EAAe,CACnBpC,SAAS,EACT2B,MAAO,MCFHS,EAAe,CACnBzC,MAAO,GACPG,aAAc,ICAHuC,EAAcC,YAAgB,CACzC3C,MDE0B,WAAmC,IAAlCE,EAAiC,uDAAzBuC,EAAcG,EAAW,uCAC5D,OAAQA,EAAO3D,MACb,KAAKR,EACH,OAAO,2BACFyB,GADL,IAEEF,MAAOE,EAAMF,MAAM6C,OAAO,CAACD,EAAOvD,YAEtC,KAAKX,EACH,OAAO,2BAAIwB,GAAX,IAAkBC,aAAcyC,EAAOvD,UACzC,QACE,OAAOa,ICXXE,IFCwB,WAAiC,IAAhCF,EAA+B,uDAAzBuC,EAAcG,EAAW,uCACxD,OAAQA,EAAO3D,MACb,KAAKN,EACH,OAAO,2BAAKuB,GAAZ,IAAmBG,SAAS,IAC9B,KAAKzB,EACH,OAAO,2BAAKsB,GAAZ,IAAmBG,SAAS,IAC9B,KAAKxB,EACH,OAAO,2BAAKqB,GAAZ,IAAmB8B,MAAOY,EAAOvD,UACnC,KAAKP,EACH,OAAO,2BAAKoB,GAAZ,IAAmB8B,MAAO,OAC5B,QAAS,OAAO9B,MGLL4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJRQ,EAAY,CAAC,OAAQ,MAAO,Q,gDCCjBC,G,WAIPC,GAJH,SAAUD,IAAV,iEACL,OADK,SACCE,YAAU3E,EAAe0E,GAD1B,uCAIP,SAAUA,IAAV,uEAEI,OAFJ,kBAEUE,YbAD,CACL1E,KAAMN,IaHV,OAGoB,OAHpB,SAG0BiF,YAAKC,GAH/B,OAII,OADMxE,EAHV,gBAIUsE,YAAI,CAAE1E,KAAMP,EAAaW,YAJnC,OAKI,OALJ,UAKUsE,YAAI3E,KALd,gCAOI,OAPJ,oCAOU2E,YAAIzE,EAAU,UAPxB,QAQI,OARJ,UAQUyE,YAAI3E,KARd,sD,SAYe6E,I,2EAAf,4BAAAC,EAAA,sEACyBC,MAAM,uDAD/B,cACQC,EADR,gBAEeA,EAASC,OAFxB,oF,sBCRA,IAAMC,EAAOC,cAEPC,EAAQC,YAAY3B,EAAa4B,YACrCC,YACEC,KFXG,YAAiD,IAAbpF,EAAY,EAAZA,SACzC,OAAO,SAAUqF,GACf,OAAO,SAAU7B,GACf,GAAIA,EAAO3D,OAASR,GACJ8E,EAAUmB,QAAO,SAAAC,GAAC,OAAI/B,EAAOvD,QAAQQ,MAAM+E,SAASD,MACxDrE,OACR,OAAOlB,EAASF,EAAU,SAG9B,OAAOuF,EAAK7B,OEIdsB,KAIJA,EAAKW,IAAIrB,GAET,IAAMpD,EACJ,cAAC,IAAD,CAAUgE,MAAOA,EAAjB,SACE,cAAC,EAAD,MAGJU,iBAAO1E,EAAK2E,SAASC,eAAe,SAKpClC,M","file":"static/js/main.8afad55b.chunk.js","sourcesContent":["export const CREATE_POST = 'CREATE_POST';\r\nexport const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const SHOW_LOADER = 'SHOW_LOADER';\r\nexport const HIDE_LOADER = 'HIDE_LOADER';\r\nexport const SHOW_ALERT = 'SHOW_ALERT';\r\nexport const HIDE_ALERT = 'HIDE_ALERT';\r\nexport const REQUEST_POSTS = 'REQUEST_POSTS';\r\n","import { CREATE_POST, HIDE_ALERT, HIDE_LOADER, SHOW_ALERT, SHOW_LOADER, REQUEST_POSTS } from \"./types\";\r\n\r\nexport function createPost(post) {\r\n  return {\r\n    type: CREATE_POST,\r\n    payload: post\r\n  }\r\n}\r\n\r\nexport function showLoader() {\r\n  return {\r\n    type: SHOW_LOADER\r\n  }\r\n}\r\n\r\nexport function hideLoader() {\r\n  return {\r\n    type: HIDE_LOADER\r\n  }\r\n}\r\n\r\nexport function showAlert(text) {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: SHOW_ALERT,\r\n      payload: text\r\n    })\r\n    setTimeout(() => {\r\n      dispatch(hideAlert())\r\n    }, 3000)\r\n  }\r\n}\r\n\r\nexport function hideAlert() {\r\n  return {\r\n    type: HIDE_ALERT\r\n  }\r\n}\r\n\r\nexport function fetchPosts() {\r\n  return {\r\n    type: REQUEST_POSTS\r\n  }\r\n  // return async function (dispatch) {\r\n  //   try {\r\n  //     dispatch(showLoader())\r\n  //     const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5');\r\n  //     const json = await response.json();\r\n  //     dispatch({ type: FETCH_POST, payload: json });\r\n  //     dispatch(hideLoader())\r\n  //   } catch (e) {\r\n  //     dispatch(showAlert('error'));\r\n  //     dispatch(hideLoader());\r\n  //   }  \r\n  // }\r\n}\r\n","import React from \"react\";\r\n\r\nexport const Loader = () => {\r\n  return (\r\n    <div className=\"spinner-border text-primary\" role=\"status\">\r\n      <span className=\"visually-hidden\">Loading...</span>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\n\r\nexport const Post = ({ post }) => {\r\n  return (\r\n    <div className='card'>\r\n      <div className='card-body'>\r\n        <h5 className='card-title'>{post.title}</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchPosts } from \"../redux/actions\";\r\nimport { Loader } from \"./Loader\";\r\nimport {Post} from \"./Post\";\r\n\r\nexport const FetchedPosts = () => {\r\n  const dispatch = useDispatch();\r\n  const posts = useSelector(state => state.posts.fetchedPosts);\r\n  const loading = useSelector(state => state.app.loading);\r\n\r\n  if (loading) {\r\n    return <Loader />\r\n  };\r\n\r\n  if (!posts.length) {\r\n    return <button\r\n      className='btn btn-primary'\r\n      onClick={() => {\r\n        dispatch(fetchPosts());\r\n      }}\r\n    >Load</button>\r\n  } else {\r\n    return posts.map(post => <Post post={post} key={post.id}/>)\r\n  };\r\n}","import React from \"react\";\r\n\r\nexport const Alert = ({text}) => {\r\n  return (\r\n    <div className=\"alert alert-warning\" role=\"alert\">\r\n      {text}\r\n    </div>\r\n  )\r\n};","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { createPost, showAlert, hideAlert } from \"../redux/actions\";\r\nimport { Alert } from './Alert';\r\n\r\nclass PostForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      title: ''\r\n    };\r\n  };\r\n\r\n  submitHandler = event => {\r\n    event.preventDefault()\r\n    const { title } = this.state;\r\n    if (!title.trim()) {\r\n      return this.props.showAlert('Строка пустая');\r\n    }\r\n\r\n    const newPost = {\r\n      title, id: Date.now().toString()\r\n    };\r\n    \r\n    this.props.createPost(newPost);\r\n    this.setState({ title: '' });\r\n  };\r\n\r\n  changeInputHandler = e => {\r\n    e.persist();\r\n    this.setState(prev => ({\r\n      ...prev, ...{\r\n        [e.target.name]: e.target.value\r\n      }\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.submitHandler}>\r\n\r\n        {this.props.alert && <Alert text={this.props.alert} />}\r\n\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"title\" className=\"form-label\">Заголовок поста</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"title\"\r\n            value={this.state.title}\r\n            name='title'\r\n            onChange={this.changeInputHandler}\r\n          />\r\n        </div>\r\n        <button className='btn btn-success' type='submit'>Создать</button>\r\n      </form>\r\n    )\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  createPost, showAlert, hideAlert\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  alert: state.app.alert\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm);\r\n","import React from \"react\";\r\nimport { Post } from \"./Post\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Posts = ({ syncPosts }) => {\r\n  if (!syncPosts.length) {\r\n    return <p className='text-center'>No posts</p>\r\n  } else {\r\n    return syncPosts.map(post => <Post post={post} key={post.id} />)\r\n  }\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  syncPosts: state.posts.posts\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(Posts);","import {FetchedPosts} from \"./components/FetchedPosts\";\nimport PostForm from \"./components/PostForm\";\nimport Posts from \"./components/Posts\";\n\nfunction App() {\n  return (\n    <div className=\"container pt-3\">\n      <div className='row'>\n        <div className='col'>\n          <PostForm />\n        </div>\n      </div>\n      <div className='row'>\n        <div className='col'>\n          <h2>Синхронные посты</h2>\n          <Posts />\n        </div>\n        <div className='col'>\n          <h2>Асинхронные посты</h2>\n          <FetchedPosts />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { HIDE_ALERT, HIDE_LOADER, SHOW_ALERT, SHOW_LOADER } from \"./types\";\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  alert: null\r\n}\r\n\r\nexport const appReducer = (state=initialState, action) => {\r\n  switch (action.type) {\r\n    case SHOW_LOADER:\r\n      return { ...state, loading: true };\r\n    case HIDE_LOADER:\r\n      return { ...state, loading: false };\r\n    case SHOW_ALERT:\r\n      return { ...state, alert: action.payload };\r\n    case HIDE_ALERT:\r\n      return { ...state, alert: null };\r\n    default: return state;\r\n  }\r\n};","import { CREATE_POST, FETCH_POSTS } from \"./types\";\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  fetchedPosts: []\r\n};\r\n\r\nexport const postsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CREATE_POST:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.concat([action.payload])\r\n      }\r\n    case FETCH_POSTS:\r\n      return {...state, fetchedPosts: action.payload}\r\n    default:\r\n      return state\r\n  }\r\n};","import { combineReducers } from \"redux\";\r\nimport { appReducer } from \"./appReducer\";\r\nimport { postsReducer } from \"./postsReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  posts: postsReducer,\r\n  app: appReducer\r\n})","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CREATE_POST } from \"./types\";\r\nimport { showAlert } from \"./actions\";\r\n\r\nconst forbidden = ['fuck', 'php', 'spam'];\r\n\r\nexport function forbiddenWordsMiddleware({ dispatch }) {\r\n  return function (next) {\r\n    return function (action) {\r\n      if (action.type === CREATE_POST) {\r\n        const found = forbidden.filter(w => action.payload.title.includes(w));\r\n        if (found.length) {\r\n          return dispatch(showAlert('spam'))\r\n        };\r\n      };\r\n      return next(action)\r\n    };\r\n  };\r\n};","import { takeEvery, put, call } from 'redux-saga/effects';\r\nimport { hideLoader, showAlert, showLoader } from './actions';\r\nimport { FETCH_POSTS, REQUEST_POSTS } from './types';\r\n\r\nexport function* sagaWatcher() {\r\n  yield takeEvery(REQUEST_POSTS, sagaWorker)\r\n};\r\n\r\nfunction* sagaWorker() {\r\n  try {\r\n    yield put(showLoader());\r\n    const payload = yield call(fetchPosts);\r\n    yield put({ type: FETCH_POSTS, payload });\r\n    yield put(hideLoader());\r\n  } catch (e) {\r\n    yield put(showAlert('error'));\r\n    yield put(hideLoader());\r\n  }\r\n};\r\n\r\nasync function fetchPosts() {\r\n  const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5');\r\n  return await response.json();\r\n};\r\n","import React from 'react';\nimport {render} from 'react-dom';\nimport { compose, createStore, applyMiddleware } from 'redux';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\nimport App from './App';\nimport { rootReducer } from './redux/rootReducer';\nimport reportWebVitals from './reportWebVitals';\nimport { forbiddenWordsMiddleware } from './redux/middleware';\nimport { sagaWatcher } from './redux/sagas';\n\nconst saga = createSagaMiddleware();\n\nconst store = createStore(rootReducer, compose(\n  applyMiddleware(\n    thunk,\n    forbiddenWordsMiddleware,\n    saga\n  )\n));\n\nsaga.run(sagaWatcher);\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>)\n\nrender(app, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}